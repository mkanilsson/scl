use crate::lexer::{Token, LexicalError};
use crate::ast::parsed::{ExprKind, BinOp, StmtKind};
use crate::ast::parsed;
use crate::ast::tajp::{TypeKind};
use crate::ast::tajp;
use crate::{expr, stmt, tajp};
use miette::{NamedSource};

grammar;

pub Expr: Box<parsed::Expr> = {
    #[precedence(level="1")]
    Term,

    #[precedence(level="2")] #[assoc(side="left")]
    <s:@L> <lhs:Expr> "*" <rhs:Expr> <e:@R> => {
        expr!(s, e, ExprKind::BinOp {
            lhs,
            op: BinOp::Multiply,
            rhs,
        })
    },
    <s:@L> <lhs:Expr> "/" <rhs:Expr> <e:@R> => {
        expr!(s, e, ExprKind::BinOp {
            lhs,
            op: BinOp::Divide,
            rhs,
        })
    },

    #[precedence(level="3")] #[assoc(side="left")]
    <s:@L> <lhs:Expr> "+" <rhs:Expr> <e:@R> => {
        expr!(s, e, ExprKind::BinOp {
            lhs,
            op: BinOp::Add,
            rhs,
        })
    },
    <s:@L> <lhs:Expr> "-" <rhs:Expr> <e:@R> => {
        expr!(s, e, ExprKind::BinOp {
            lhs,
            op: BinOp::Subtract,
            rhs,
        })
    },

    // TODO: shift (<<, >>)
    #[precedence(level="5")] #[assoc(side="left")]
    <s:@L> <lhs:Expr> "<" <rhs:Expr> <e:@R> => {
        expr!(s, e, ExprKind::BinOp {
            lhs,
            op: BinOp::LessThan,
            rhs,
        })
    },
    <s:@L> <lhs:Expr> "<=" <rhs:Expr> <e:@R> => {
        expr!(s, e, ExprKind::BinOp {
            lhs,
            op: BinOp::LessThanOrEqual,
            rhs,
        })
    },
    <s:@L> <lhs:Expr> ">" <rhs:Expr> <e:@R> => {
        expr!(s, e, ExprKind::BinOp {
            lhs,
            op: BinOp::GreaterThan,
            rhs,
        })
    },
    <s:@L> <lhs:Expr> ">=" <rhs:Expr> <e:@R> => {
        expr!(s, e, ExprKind::BinOp {
            lhs,
            op: BinOp::GreaterThanOrEqual,
            rhs,
        })
    },

    #[precedence(level="6")] #[assoc(side="left")]
    <s:@L> <lhs:Expr> "==" <rhs:Expr> <e:@R> => {
        expr!(s, e, ExprKind::BinOp {
            lhs,
            op: BinOp::Equal,
            rhs,
        })
    },

    // TODO: Move this to stmt
    #[precedence(level="7")] #[assoc(side="left")]
    <s:@L> <lhs:Expr> "=" <rhs:Expr> <e:@R> => {
        expr!(s, e, ExprKind::Assignment {
            lhs,
            rhs,
        })
    },
}

pub Term: Box<parsed::Expr> = {
    #[precedence(level="1")]
    <s:@L> <ident:Ident> <e:@R> => {
        expr!(s, e, ExprKind::Identifier(ident))
    },
    <s:@L> <str:"string"> <e:@R> => {
        expr!(s, e, ExprKind::String(str))
    },
    <s:@L> <num:"number"> <e:@R> => {
        expr!(s, e, ExprKind::Number(num))
    },
    <s:@L> "true" <e:@R> => {
        expr!(s, e, ExprKind::Bool(true))
    },
    <s:@L> "false" <e:@R> => {
        expr!(s, e, ExprKind::Bool(false))
    },
    <s:@L> <lhs:Term> "." <ident:Ident> <e:@R> => {
        expr!(s, e, ExprKind::MemberAccess {
            lhs,
            member: ident,
        })
    },
    <s:@L> <lhs:Term> "." "*" <e:@R> => {
        expr!(s, e, ExprKind::Deref(lhs))
    },
    <s:@L> <ident:Ident> "{" <members:StructInstantiationMembers> "}" <e:@R> => {
        expr!(s, e, ExprKind::StructInstantiation {
            name: ident,
            members: members,
        })
    },
    <s:@L> <expr:Term> <type_params:CallTypeParams?> "(" <params:ProcCallParams> ")" <e:@R> => {
        expr!(s, e, ExprKind::Call {
            expr,
            params,
            generic_params: if let Some(type_params) = type_params {
                type_params
            } else {
                vec![]
            }
        })
    },
    <s:@L> <builtin:"builtin"> "(" <params:ProcCallParams> ")" <e:@R> => {
        expr!(s, e, ExprKind::Builtin(builtin, params))
    },
    <s:@L> <lhs:Term> "as" <tajp:Type> <e:@R> => {
        expr!(s, e, ExprKind::Cast {
            lhs,
            tajp,
        })
    },
    <s:@L> <block:Block> <e:@R> => {
        expr!(s, e, ExprKind::Block(block))
    },

    <s:@L> "(" <expr:Expr> ")" <e:@R> => {
        expr!(s, e, expr.kind)
    },

    #[precedence(level="2")]
    <s:@L> "if" "(" <condition:Expr> ")" <true_block:Block> "else" <false_block:Block> <e:@R> => {
         expr!(s, e, ExprKind::If {
             condition,
             true_block,
             false_block,
         })
    },
    <s:@L> "&" <expr:Term> <e:@R> => {
        expr!(s, e, ExprKind::AddressOf(expr))
    },
}

pub Stmt: parsed::Stmt = {
    <s:@L> "let" <name:Ident> "=" <value:UnboxedExpr> ";" <e:@R> => {
        stmt!(s, e, StmtKind::VariableDeclaration {
            name,
            value
        })
    },
    <s:@L> "ret" <value:UnboxedExpr?> ";" <e:@R> => {
        stmt!(s, e, StmtKind::Return {
            value,
        })
    },
    <s:@L> <expr:UnboxedExpr> ";" <e:@R> => {
        stmt!(s, e, StmtKind::Expr(expr))
    }
}

Block: Box<parsed::Block> = {
    <s:@L> "{" <stmts:Stmt*> <last:UnboxedExpr?> "}" <e:@R> => {
        Box::new(parsed::Block {
            stmts,
            last: last,
            span: (s..e).into()
        })
    },
}

Ident: parsed::Ident = {
    <s:@L> <ident:"identifier"> <e:@R> => {
        parsed::Ident::new(ident, (s..e).into())
    }
}

StructInstantiationMembers = Comma<StructInstantiationMember>;
StructInstantiationMember: (parsed::Ident, parsed::Expr) = {
    <ident:Ident> ":" <expr:Expr> => {
        (ident, *expr)
    } 
}

ProcCallParams = Comma<UnboxedExpr>;

UnboxedExpr: parsed::Expr = {
    <expr:Expr> => {
        *expr
    }
}

Types = Comma<Type>;

TypeParams: Vec<tajp::Type> = {
    "<" <types:Types> ">" => {
        types
    }
}
CallTypeParams: Vec<tajp::Type> = {
    "::" "<" <types:Types> ">" => {
        types
    }
}

Idents = Comma<Ident>;
GenericParams: Vec<parsed::Ident> = {
    "<" <idents:Idents> ">" => {
        idents
    }
}

Type: tajp::Type = {
    <s:@L> <ident:Ident> <e:@R> => {
        tajp!(s, e, TypeKind::Named(ident))
    },
    <s:@L> "!" <e:@R> => {
        tajp!(s, e, TypeKind::Never)
    },
    <s:@L> "*" <inner:Type> <e:@R> => {
        tajp!(s, e, TypeKind::Ptr(Box::new(inner)))
    }
}

Import: parsed::Import = {
    <ident:Ident> => {
        parsed::Import::Final(ident)
    },
    <ident:Ident> "::" <import:Import>  => {
        parsed::Import::Part(Box::new(import), ident)
    }
}

StructDefinition: parsed::StructDefinition = {
    "struct" <ident:Ident> "{" <fields:StructDefinitionFields> "}" => {
        parsed::StructDefinition {
            ident,
            fields,
        }
    }
}

StructDefinitionFields = Comma<StructDefinitionField>;
StructDefinitionField: (parsed::Ident, tajp::Type) = {
    <ident:Ident> ":" <tajp:Type> => {
        (ident, tajp)
    } 
}

ExternProcParams: (Vec<tajp::Type>, bool) = {
    <types:(<Type> ",")*> "..." ","? => {
        (types, true)
    },
    <mut types:(<Type> ",")*> <last:Type?> => {
        match last {
            Some(last) => types.push(last),
            None => {}
        }

        (types, false)
    },
}

ExternProcDefinition: parsed::ExternProcDefinition = {
    "extern" "proc" <ident:Ident> <type_params:GenericParams?> "(" <params:ExternProcParams> ")" <return_type:Type> => {
        parsed::ExternProcDefinition {
            ident,
            params: params.0,
            variadic: params.1,
            return_type,
            type_params: if let Some(type_params) = type_params {
                type_params
            } else {
                vec![]
            }
        }
    }
}

ProcParams = Comma<ProcParam>;
ProcParam: (parsed::Ident, tajp::Type) = {
    <ident:Ident> ":" <tajp:Type> => {
        (ident, tajp)
    }
}

ProcDefinition: parsed::ProcDefinition = {
    "proc" <ident:Ident> "(" <params:ProcParams> ")" <return_type:Type> <body:Block> => {
        parsed::ProcDefinition {
            ident,
            params: params,
            return_type,
            body: *body
        }
    }
}

pub TranslationUnit: parsed::TranslationUnit = {
    <mut tu:TranslationUnit> "use" <import:Import>  => {
        tu.imports.push(import);
        tu
    },
    <mut tu:TranslationUnit> <extern_proc:ExternProcDefinition> => {
        tu.extern_procs.push(extern_proc);
        tu
    },
    <mut tu:TranslationUnit> <proc:ProcDefinition> => {
        tu.procs.push(proc);
        tu
    },
    <mut tu:TranslationUnit> <struct_definition:StructDefinition> => {
        tu.structs.push(struct_definition);
        tu
    },
    => {
        parsed::TranslationUnit {
            source: NamedSource::new("".to_string(), "".to_string()),
            procs: vec![],
            extern_procs: vec![],
            structs: vec![],
            imports: vec![],
        }
    }
}

// Utils
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

extern  {
    type Location = usize;
    type Error = LexicalError;

    enum Token {
        "number" => Token::Number(<String>),
        "identifier" => Token::Identifier(<String>),
        "string" => Token::String(<String>),
        "builtin" => Token::Builtin(<String>),
        "true" => Token::True,
        "false" => Token::False,
        ")" => Token::OpenParen,
        "(" => Token::CloseParen,
        "if" => Token::If,
        "else" => Token::Else,
        "let" => Token::Let,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "&" => Token::Ampersand,
        "=" => Token::Equal,
        ";" => Token::Semicolon,
        "==" => Token::EqualEqual,
        "!=" => Token::ExclamationEqual,
        "!" => Token::Exclamation,
        "{" => Token::OpenCurly,
        "}" => Token::CloseCurly,
        ":" => Token::Colon,
        "::" => Token::ColonColon,
        "," => Token::Comma,
        "." => Token::Dot,
        "<" => Token::LessThan,
        "<=" => Token::LessThanOrEqual,
        ">" => Token::GreaterThan,
        ">=" => Token::GreaterThanOrEqual,
        "..." => Token::DotDotDot,
        "ret" => Token::Ret,
        "proc" => Token::Proc,
        "extern" => Token::Extern,
        "struct" => Token::Struct,
        "use" => Token::Use,
        "as" => Token::As,
    }
}
