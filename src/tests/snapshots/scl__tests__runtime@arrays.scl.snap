---
source: src/tests/mod.rs
expression: code
input_file: src/tests/sources/runtime/arrays.scl
---
export function w $std.math.add(w %a, w %b) {
@start
	%.ss.0 =l alloc4 4
	%.ss.1 =l alloc4 4
	storew %a, %.ss.0
	storew %b, %.ss.1
@body
	%.sv.1 =w loadw %.ss.0
	%.sv.2 =w loadw %.ss.1
	%.binop.3 =w add %.sv.1, %.sv.2
	ret %.binop.3
}
export function w $main() {
@start
	%.ss.0 =l alloc4 12
	%.ss.1 =l alloc4 12
	%.ss.2 =l alloc4 4
	%.ss.3 =l alloc4 4
	%.ss.4 =l alloc4 4
	%.ss.5 =l alloc4 4
	%.ss.6 =l alloc4 4
@body
	%.array_instantiation.0.4 =l add %.ss.0, 0
	storew 1, %.array_instantiation.0.4
	%.array_instantiation.1.4 =l add %.ss.0, 4
	storew 2, %.array_instantiation.1.4
	%.array_instantiation.2.4 =l add %.ss.0, 8
	storew 3, %.array_instantiation.2.4
	blit %.ss.0, %.ss.1, 12
	%.array_access.offset.5 =l mul 1, 4
	%.array_access.addr.5 =l add %.ss.1, %.array_access.offset.5
	%.read.6 =w loadw %.array_access.addr.5
	storew %.read.6, %.ss.2
	%.sv.9 =w loadw %.ss.2
	%.printf.return_value.7 =w call $printf(l $.str.8, ..., w %.sv.9)
	%.array_access.offset.10 =l mul 1, 4
	%.array_access.addr.10 =l add %.ss.1, %.array_access.offset.10
	storew 123, %.array_access.addr.10
	%.array_access.offset.13 =l mul 1, 4
	%.array_access.addr.13 =l add %.ss.1, %.array_access.offset.13
	%.read.14 =w loadw %.array_access.addr.13
	%.printf.return_value.11 =w call $printf(l $.str.12, ..., w %.read.14)
	%.sv.17 =w loadw %.ss.2
	%.printf.return_value.15 =w call $printf(l $.str.16, ..., w %.sv.17)
	%.printf.return_value.18 =w call $printf(l $.str.19, ..., l 3)
	ret 0
}
data $.str.8 = { b "b = %d\n", b 0 }
data $.str.12 = { b "a[1] = %d\n", b 0 }
data $.str.16 = { b "b = %d\n", b 0 }
data $.str.19 = { b "@len(a) = %d\n", b 0 }
